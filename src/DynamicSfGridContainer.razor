@namespace Orbyss.SyncFusion.DynamicGrid.Internal

@implements IDisposable
@implements IAsyncDisposable

@if (ToolbarItems.Any())
{
    <SfGrid TValue="JToken"
            EnableAdaptiveUI=true
            AllowPaging="@(Options?.EnablePaging ?? false)"
            EnableVirtualization=@(Options?.EnableVirtualization ?? false)
            EnableInfiniteScrolling=@(Options?.EnableVirtualization ?? false)
            Height="@(Options?.VirtualizationOptions?.FixedHeight ?? "auto")"
            AllowFiltering=@(allowFiltering)
            EnableVirtualMaskRow=@(Options?.VirtualizationOptions?.EnableMaskRows ?? false)            
            AllowSorting="@(allowSorting)"
            Toolbar="@ToolbarItems"
            @ref="GridRef">

        @ChildContent

    </SfGrid>
}
else
{
    <SfGrid TValue="JToken"
            EnableAdaptiveUI=true
            AllowPaging="@(Options?.EnablePaging ?? false)"
            EnableVirtualization=@(Options?.EnableVirtualization ?? false)
            EnableInfiniteScrolling=@(Options?.EnableVirtualization ?? false)
            Height="@(Options?.VirtualizationOptions?.FixedHeight ?? "auto")"
            AllowFiltering=@(allowFiltering)
            EnableVirtualMaskRow=@(Options?.VirtualizationOptions?.EnableMaskRows ?? false)
            AllowSorting="@(allowSorting)"
            @ref="GridRef">

        @ChildContent

    </SfGrid>
}


@code {
    private SfGrid<JToken>? GridRef;

    [Inject]
    IColumnValueStringifier ColumnValueStringifier { get; set; } = default!;

    [Parameter, EditorRequired]
    public DynamicGridOptions? Options { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public IEnumerable<ItemModel> ToolbarItems { get; set; } = [];


    [CascadingParameter]
    public DynamicColumn[] Columns { get; set; } = [];

    [CascadingParameter]
    public ITableTranslationContext? TableTranslationContext { get; set; }


    bool allowFiltering;
    bool allowSorting;

    void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        DynamicGridCulture.CultureChanged -= OnLanguageChanged;
        GC.SuppressFinalize(this);
    }

    public ValueTask DisposeAsync()
    {
        DynamicGridCulture.CultureChanged -= OnLanguageChanged;
        GC.SuppressFinalize(this);
        return new();
    }

    protected override void OnInitialized()
    {
        allowFiltering = Columns.Any(x => x.FilterOperator.HasValue);
        allowSorting = Columns.Any(x => x.Sortable);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        var activeLanguage = DynamicGridCulture.Instance.TwoLetterISOLanguageName;
        foreach (var col in Columns)
        {
            if (col.IsEnum)
            {
                var translatedEnums = TableTranslationContext?
                    .TranslateEnum(activeLanguage, col.Scope)?
                    .ToList()
                    ?? [];

                col.Template = BuildEnumColumnTemplate(col, translatedEnums);

                if (!col.HasHeaderFilter)
                {
                    col.FilterTemplate = builder =>
                    {
                        builder.AddContent(0, new MarkupString());
                    };
                }
                else if (col.EnumConfiguration!.MultiSelect)
                {
                    col.FilterTemplate = BuildMultiEnumFilterTemplate(col, translatedEnums);
                }
                else
                {
                    col.FilterTemplate = BuildSingleEnumFilterTemplate(col, translatedEnums);
                }
            }
            else
            {
                col.Template = rowToken =>
                {
                    return builder =>
                    {
                        var columnText = ColumnValueStringifier.StringifyColumn(
                            col,
                            rowToken
                        );
                        builder.AddContent(0, new MarkupString(columnText));
                    };
                };
                if (!col.HasHeaderFilter)
                {
                    col.FilterTemplate = builder =>
                    {
                        builder.AddContent(0, new MarkupString());
                    };
                }
                else if (col.ColumnType == TableColumnType.TextList)
                {
                    col.FilterTemplate = BuildTextListFilterTemplate(col);
                }
                else if (col.ColumnType == TableColumnType.IntegerList)
                {
                    col.FilterTemplate = BuildIntegerListFilterTemplate(col);
                }
                else if (col.ColumnType == TableColumnType.NumberList)
                {
                    col.FilterTemplate = BuildNumberListFilterTemplate(col);
                }
            }
        }
    }

    RenderFragment<JToken> BuildEnumColumnTemplate(DynamicColumn col, IEnumerable<TranslatedEnumItem> translatedEnums)
    {
        return rowToken =>
        {
            return builder =>
            {
                var token = rowToken.SelectToken(col.Field, false);
                if (token is JArray enumArray)
                {
                    var translations = translatedEnums.Where(@enum =>
                    {
                        return enumArray.Any(item => item.ToString() == @enum.Value);
                    });
                    var labels = translations.Select(x => x.Label);
                    builder.AddContent(
                        0,
                        new MarkupString(
                            string.Join(", ", labels)
                        )
                    );
                }
                else if (token is not null)
                {
                    var translation = translatedEnums.FirstOrDefault(@enum =>
                    {
                        return @enum.Value == $"{token}";
                    });
                    builder.AddContent(
                        0,
                        new MarkupString(
                            translation.Label
                        )
                    );
                }
                else
                {
                    builder.AddContent(0, new MarkupString($"VAL_ERR"));
                }
            };
        };
    }

    RenderFragment BuildMultiEnumFilterTemplate(DynamicColumn col, IEnumerable<TranslatedEnumItem> translatedEnums)
    {
        return builder =>
        {
            int seq = 0;
            builder.OpenComponent(seq++, typeof(SfMultiSelect<List<string>, TranslatedEnumItem>));
            builder.AddAttribute(seq++, "ValueChanged", EventCallback.Factory.Create<List<string>>(this, async e =>
            {
                if (e is null || e.Count == 0)
                {
                    await GridRef!.ClearFilteringAsync(col.Field);
                }
                else
                {
                    if (col.ColumnType == TableColumnType.EnumList)
                    {
                        await GridRef!.FilterByColumnAsync(col.Field, "contains", e.ToArray());
                    }
                    else
                    {
                        await GridRef!.FilterByColumnAsync(col.Field, "equal", e.ToArray());
                    }
                }
            }));

            builder.AddAttribute(seq++, "DataSource", translatedEnums);
            builder.AddAttribute(seq++, "Width", "100%");
            builder.AddAttribute(seq++, "ShowClearButton", true);

            builder.AddAttribute(seq++, "ChildContent", (RenderFragment)(fieldBuilder =>
            {
                fieldBuilder.OpenComponent<MultiSelectFieldSettings>(0);
                fieldBuilder.AddAttribute(1, "Value", nameof(TranslatedEnumItem.Value));
                fieldBuilder.AddAttribute(2, "Text", nameof(TranslatedEnumItem.Label));
                fieldBuilder.CloseComponent();
            }));


            builder.CloseComponent();
        };
    }

    RenderFragment<JToken> BuildSingleEnumColumnTemplate(DynamicColumn col, IEnumerable<TranslatedEnumItem> translatedEnums)
    {
        return rowToken =>
        {
            return builder =>
            {
                var token = rowToken.SelectToken(col.Field, false);
                if (token is not null)
                {
                    var translation = translatedEnums.FirstOrDefault(x => x.Value == $"{token}");
                    builder.AddContent(0, new MarkupString($"{translation.Label}"));
                }
                else
                {
                    builder.AddContent(0, new MarkupString($"VAL_ERR"));
                }
            };
        };
    }

    RenderFragment BuildSingleEnumFilterTemplate(DynamicColumn col, IEnumerable<TranslatedEnumItem> translatedEnums)
    {
        return builder =>
        {
            int seq = 0;
            builder.OpenComponent(seq++, typeof(SfDropDownList<string, TranslatedEnumItem>));
            builder.AddAttribute(seq++, "ValueChanged", EventCallback.Factory.Create<string>(this, async e =>
            {
                if (string.IsNullOrWhiteSpace(e))
                {
                    await GridRef!.ClearFilteringAsync(col.Field);
                }
                else
                {
                    if (col.ColumnType == TableColumnType.EnumList)
                    {
                        await GridRef!.FilterByColumnAsync(col.Field, "contains", e);
                    }
                    else
                    {
                        await GridRef!.FilterByColumnAsync(col.Field, "equal", e);
                    }
                }
            }));

            builder.AddAttribute(seq++, "DataSource", translatedEnums);
            builder.AddAttribute(seq++, "Width", "100%");
            builder.AddAttribute(seq++, "ShowClearButton", true);

            builder.AddAttribute(seq++, "ChildContent", (RenderFragment)(fieldBuilder =>
            {
                fieldBuilder.OpenComponent<DropDownListFieldSettings>(0);
                fieldBuilder.AddAttribute(1, "Value", nameof(TranslatedEnumItem.Value));
                fieldBuilder.AddAttribute(2, "Text", nameof(TranslatedEnumItem.Label));
                fieldBuilder.CloseComponent();
            }));


            builder.CloseComponent();
        };
    }

    RenderFragment BuildTextListFilterTemplate(DynamicColumn col)
    {
        return builder =>
        {
            int seq = 0;
            builder.OpenComponent(seq++, typeof(SfTextBox));
            builder.AddAttribute(seq++, nameof(SfTextBox.Type), InputType.Text);
            builder.AddAttribute(seq++, nameof(SfTextBox.ValueChanged), EventCallback.Factory.Create<string>(this, async e =>
            {
                if (string.IsNullOrWhiteSpace(e))
                {
                    await GridRef!.ClearFilteringAsync(col.Field);
                }
                else
                {
                    await GridRef!.FilterByColumnAsync(col.Field, "contains", e);
                }
            }));

            builder.AddAttribute(seq++, nameof(SfTextBox.Width), "100%");
            builder.AddAttribute(seq++, nameof(SfTextBox.ShowClearButton), true);

            builder.CloseComponent();
        };
    }

    RenderFragment BuildIntegerListFilterTemplate(DynamicColumn col)
    {
        return builder =>
        {
            int seq = 0;
            builder.OpenComponent(seq++, typeof(SfNumericTextBox<int?>));
            builder.AddAttribute(seq++, nameof(SfNumericTextBox<int?>.ValueChanged), EventCallback.Factory.Create<int?>(this, async e =>
            {
                if (!e.HasValue)
                {
                    await GridRef!.ClearFilteringAsync(col.Field);
                }
                else
                {
                    await GridRef!.FilterByColumnAsync(col.Field, "contains", e);
                }
            }));

            builder.AddAttribute(seq++, nameof(SfNumericTextBox<int?>.Width), "100%");
            builder.AddAttribute(seq++, nameof(SfNumericTextBox<int?>.ShowClearButton), true);

            builder.CloseComponent();
        };
    }

    RenderFragment BuildNumberListFilterTemplate(DynamicColumn col)
    {
        return builder =>
        {
            int seq = 0;
            builder.OpenComponent(seq++, typeof(SfTextBox));
            builder.AddAttribute(seq++, nameof(SfTextBox.Type), InputType.Number);
            builder.AddAttribute(seq++, nameof(SfTextBox.ValueChanged), EventCallback.Factory.Create<string>(this, async e =>
            {
                if (string.IsNullOrWhiteSpace(e))
                {
                    await GridRef!.ClearFilteringAsync(col.Field);
                }
                else
                {
                    var filterValue = double.Parse(e, DynamicGridCulture.Instance);
                    await GridRef!.FilterByColumnAsync(col.Field, "contains", filterValue);
                }
            }));

            builder.AddAttribute(seq++, nameof(SfTextBox.Width), "100%");
            builder.AddAttribute(seq++, nameof(SfTextBox.ShowClearButton), true);

            builder.CloseComponent();
        };
    }
}
