@using Orbyss.Blazor.Syncfusion.DynamicGrid.Interfaces
@using Orbyss.Blazor.Syncfusion.DynamicGrid.Interpretation
@using Orbyss.Blazor.Syncfusion.DynamicGrid.Translation
@using Orbyss.Components.Json.Models

@implements IDisposable
@implements IAsyncDisposable

<CascadingValue Value="@tableTranslationContext">
    <CascadingValue Value="@columns">
        <DynamicSfGridContainer Options="@(Options)">

            @if (ShouldRenderInfiniteScrollingSettings())
            {
                <GridInfiniteScrollSettings EnableCache=@(Options!.VirtualizationOptions!.EnableCache ?? false)
                                            InitialBlocks=@(Options!.VirtualizationOptions!.InitialBlocksToLoad ?? 3)
                                            MaximumBlocks=@(Options!.VirtualizationOptions!.MaximumBlocksToRender ?? 3) />
            }

            @if(TableUiSchema?.InitialOrdering is not null)
            {
                <GridSortSettings>
                    <GridSortColumns>
                        <GridSortColumn Direction="@(GetInitialSortDirection())" Field="@(GetInitialOrderingFieldName())" />
                    </GridSortColumns>
                </GridSortSettings>
            }

            @if(Options?.PageSize is not null)
            {
                <GridPageSettings PageSize="@(Options.PageSize.Value)" />
            }

            <SfDataManager AdaptorInstance="@(CustomDataAdaptorType)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>

            @if (ToolbarItems.Any())
            {
                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="JToken"></GridEvents>
            }

            <GridColumns>
                @foreach (var column in columns)
                {
                    @if (column.Template is not null && column.FilterTemplate is not null)
                    {
                        <GridColumn Field="@column.Field"
                                    HeaderText="@TranslateLabel(column)"
                                    TextAlign="@column.TextAlign"
                                    AllowSorting=@column.Sortable
                                    Width="@column.Width"
                                    Format="@column.Format"
                                    AllowFiltering=@(column.HasHeaderFilter)
                                    FilterSettings="@(new FilterSettings(){ Operator = column.FilterOperator })"
                                    Context="columnContext">

                            <Template>
                                @column.Template((JToken)columnContext)
                            </Template>

                            <FilterTemplate>
                                @column.FilterTemplate
                            </FilterTemplate>
                        </GridColumn>
                    }
                    else if (column.Template is not null)
                    {
                        <GridColumn Field="@column.Field"
                                    HeaderText="@TranslateLabel(column)"
                                    TextAlign="@column.TextAlign"
                                    Width="@column.Width"
                                    Format="@column.Format"
                                    Type="@column.GetSfColumnType()"
                                    AllowFiltering=@(column.HasHeaderFilter)
                                    FilterSettings="@(new FilterSettings(){ Operator = column.FilterOperator })"
                                    Context="columnContext">
                            <Template>
                                @column.Template((JToken)columnContext)
                            </Template>
                        </GridColumn>
                    }
                    else if (column.FilterTemplate is not null)
                    {
                        <GridColumn Field="@column.Field"
                                    HeaderText="@TranslateLabel(column)"
                                    TextAlign="@column.TextAlign"
                                    Width="@column.Width"
                                    Format="@column.Format"
                                    AllowFiltering=@(column.HasHeaderFilter)
                                    FilterSettings="@(new FilterSettings(){ Operator = column.FilterOperator })"
                                    Type="@column.GetSfColumnType()">

                            <FilterTemplate>
                                @column.FilterTemplate
                            </FilterTemplate>
                        </GridColumn>
                    }
                    else
                    {
                        <GridColumn Field="@column.Field"
                                    HeaderText="@TranslateLabel(column)"
                                    TextAlign="@column.TextAlign"
                                    Format="@column.Format"
                                    Width="@column.Width"
                                    AllowFiltering=@(column.HasHeaderFilter)
                                    FilterSettings="@(new FilterSettings(){ Operator = column.FilterOperator })"
                                    Type="@column.GetSfColumnType()">
                        </GridColumn>
                    }
                }
            </GridColumns>
        </DynamicSfGridContainer>

    </CascadingValue>
</CascadingValue>

@code {
    [Inject] IJsonPathInterpreter JsonPathInterpreter { get; set; } = default!;

    [Inject] ITableUiSchemaInterpreter Interpreter { get; set; } = default!;

    [Inject] IDynamicColumnBuilder DynamicColumnBuilder { get; set; } = default!;

    [Parameter]
    public Type CustomDataAdaptorType { get; set; } = typeof(JTokenDataAdaptor);

    [Parameter]
    public IEnumerable<ItemModel> ToolbarItems { get; set; } = [];

    [Parameter]
    public TableUiSchema? TableUiSchema { get; set; } = default!;

    [Parameter]
    public TranslationSchema? TranslationSchema { get; set; }

    [Parameter, EditorRequired]
    public JSchema ItemsJsonSchema { get; set; } = default!;

    [Parameter]
    public DynamicGridOptions Options { get; set; } = DynamicGridOptions.Default;

    bool ShouldRenderInfiniteScrollingSettings()
    {
        if (!Options.EnableVirtualization || Options.VirtualizationOptions is null)
            return false;

        var virtualizationOptions = Options.VirtualizationOptions;

        return virtualizationOptions.InitialBlocksToLoad is not null
            || virtualizationOptions.MaximumBlocksToRender is not null
            || virtualizationOptions.EnableCache is not null;
    }

    SortDirection GetInitialSortDirection()
    {
        return Enum.Parse<SortDirection>(
            $"{TableUiSchema?.InitialOrdering?.Direction}",
            true
        );
    }

    string GetInitialOrderingFieldName()
    {
        var jsonPath = JsonPathInterpreter
            .FromElementScope(TableUiSchema!.InitialOrdering!.Scope);

        return JsonPathInterpreter.FromSchemaPath(jsonPath);
    }


    private ITableTranslationContext? tableTranslationContext;
    private DynamicColumn[] columns = [];

    private string TranslateLabel(DynamicColumn col)
    {
        var activeLanguage = DynamicGridCulture.Instance.TwoLetterISOLanguageName;
        return tableTranslationContext?.TranslateLabel(activeLanguage, col.HeaderLabel, col.Scope.AbsoluteSchemaJsonPath)
            ?? string.Empty;
    }

    Task ToolbarClickHandler(global::Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var customToolbarItem = ToolbarItems.FirstOrDefault(x => x.Id == args.Item.Id);
        if (customToolbarItem is not null)
        {
            return customToolbarItem.Click.InvokeAsync(args);
        }

        return Task.CompletedTask;
    }

    void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        DynamicGridCulture.CultureChanged -= OnLanguageChanged;
        GC.SuppressFinalize(this);
    }

    public ValueTask DisposeAsync()
    {
        DynamicGridCulture.CultureChanged -= OnLanguageChanged;
        GC.SuppressFinalize(this);
        return new();
    }

    protected override void OnInitialized()
    {
        tableTranslationContext = new TableTranslationContext(JsonPathInterpreter);
        tableTranslationContext.Instantiate(TranslationSchema, ItemsJsonSchema);

        if (TableUiSchema is not null)
        {
            columns = DynamicColumnBuilder.BuildDynamicColumns(TableUiSchema, ItemsJsonSchema);
        }
        else
        {
            columns = DynamicColumnBuilder.BuildDynamicColumns(ItemsJsonSchema);
        }

        DynamicGridCulture.CultureChanged += OnLanguageChanged;

        base.OnInitialized();
    }
}
