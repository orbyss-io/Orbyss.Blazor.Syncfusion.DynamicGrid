@page "/"
@using Newtonsoft.Json.Schema
@using Orbyss.Blazor.Syncfusion.DynamicGrid.Interpretation
@using Orbyss.Blazor.Syncfusion.DynamicGrid.Models

<h1>Dynamic Data Grid!</h1>

@if(!string.IsNullOrWhiteSpace(error))
{
    <p style="color:red">@error</p>
}

else
{
    <label for="text-area-json-schema">
        Paste your item schema here:
    </label>

    <p id="text-area-json-schema">
        @jsonSchema
    </p>

    <label for="text-area-ui-schema">
        Optionally, paste your UI schema here:
    </label>

    <InputTextArea @bind-Value=@uiSchemaJson id="text-area-ui-schema">
    </InputTextArea>

    <button class="btn-primary">Load Dynamic Grid</button> 


    <br/>
    <br />

    if(itemsSchema is not null)
    {
        <Orbyss.Blazor.Syncfusion.DynamicGrid.DynamicSfGrid ItemsJsonSchema="@itemsSchema" TableUiSchema="@uiSchema" />
    }
}

@code{
    TableUiSchema? uiSchema;
    JSchema? itemsSchema;

    string? error;

    const string jsonSchema = @"
    {
        ""properties"":{
            ""firstName"": {
                ""type"": ""string""
            },
            ""surname"": {
                ""type"": ""string""
            },
            ""dateOfBirth"": {
                ""type"": ""string"",
                ""format"": ""date""
            },
            ""status"": {
                ""type"": ""string"",
                ""enum"": [
                    ""Pending"",
                    ""Accepted"",
                    ""Rejected""
                ]
            }
        }
    }
    ";


    string uiSchemaJson = "";

    void Load()
    {
        try
        {
            itemsSchema = JSchema.Parse(jsonSchema);
            if(!string.IsNullOrWhiteSpace(uiSchemaJson))
            {
                uiSchema = DefaultJsonConverter.Deserialize<TableUiSchema>(uiSchemaJson);                
            }
            else
            {
                uiSchema = null;
            }
        }
        catch(Exception e)
        {
            error = e.Message;   
        }

        InvokeAsync(StateHasChanged);
    }
}
